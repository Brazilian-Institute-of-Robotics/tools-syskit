---
title: Communication Busses
sort_info: 300
---

Communication busses
--------------------
Special love is given to _communication busses_. They are modelled a certain
type of device, which are used to allow the communication between 

On the task context side, they are no different: one just needs to declare that
the task is a device driver for the communication bus:

{coderay:: ruby}
class CanBus::Task
  driver_for 'can'
end
{coderay}

On the device list side, however, things change a bit. First, one needs to use
the 'com_bus' statement instead of the 'device' statement. Moreover, one needs
to declare what type will be used to represent the bus messages (i.e. what type
is used as input and output to the driver's task context).

{coderay:: ruby}
com_bus 'can', :message_type => '/can/Message'
{coderay}

**Note** the type name can either be written in Typelib format (using '/' as
separator), or in C++ format (e.g. can::Message)
{: .note}

Finally, one only needs 

