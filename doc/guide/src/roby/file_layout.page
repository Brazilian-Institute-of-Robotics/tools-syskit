---
title: Scaling up - the Standard File Layout
sort_info: 600
---

What we did until now is create one system model file to declare the composition
(in tasks/composition/ptu_servoing.rb) and one single deployment specification
file (tut.rb). All is well, as our system is very small.

However, one goal of the whole exercise is to allow scaling up to big systems,
and to reuse most of the code between two different systems that share common
properties (i.e. common actions and/or common devices).

What this page will present is the standard file layout the Orocos/Roby plugin
offers, that should make your life easier to keep things sorted out.


Generic models
--------------
First, the **data services** should be stored in tasks/data_services. Having one
file per data service is not really practical, so there is in general one file
per service category (as, for instance, a 'control.rb' file for all interfaces
that are closely related to the motor control loops, or a 'perception.rb' file
for sensor acquisition and processing).

Second, the **compositions** should be stored in tasks/compositions. The
convention is to have one file per composition, and to name the file as the
composition but in snake_case (i.e. ImageProcessing is declared in
image_processing.rb).

Third, the **task context definitions** are stored on a per-orogen-project
basis. What happens is that, each time an oroGen project is loaded (because the
its task context definitions are needed), Orocos/Roby plugin will dynamically
load a file named likewise in tasks/components. E.g., when the xsens_imu
component is loaded, then a file named tasks/components/xsens_imu.rb will be
loaded if it exists.


Robot definition file
---------------------
The robot definition should be stored Roby's standard robot configuration file
config/robot_name.rb

Deployments
-----------
The deployments for your system can be stored in
config/deployments/deployment_name.rb, and then referred to by their name.

I.e. there is in general a 'main' deployment in
config/deployments/main-robot_name.rb that is loaded at startup from the robot's
controller in controllers/robot_name.rb with

{coderay:: ruby}
Roby.app.apply_orocos_deployment 'main-robot_name'
{coderay}

to set up essential services. This deployment is then modified dynamically by
means that will be described later.

**Important**: using the standard file layout does *not* forbid you to create
small deployment files and use the scripts/orocos/{instanciate,configure,run}
scripts. These scripts use the same loading code than the standard Roby
controllers, so models saved in the standard layout *will be* available to
single deployment scripts given to them
{: .warning}

